class Solution:
    def constructDistancedSequence(self, n):
        sequence = [0] * (2 * n - 1)  # Create an array of required length initialized with 0
        used = [False] * (n + 1)  # Track used numbers
        
        def backtrack(pos):
            if pos == len(sequence):  # If filled, return True
                return True
            
            if sequence[pos] != 0:  # Skip filled positions
                return backtrack(pos + 1)
            
            for num in range(n, 0, -1):  # Place larger numbers first
                if used[num]:
                    continue
                
                if num == 1:
                    sequence[pos] = 1
                    used[num] = True
                    if backtrack(pos + 1):
                        return True
                    sequence[pos] = 0
                    used[num] = False
                else:
                    if pos + num < len(sequence) and sequence[pos + num] == 0:
                        sequence[pos] = sequence[pos + num] = num
                        used[num] = True
                        if backtrack(pos + 1):
                            return True
                        sequence[pos] = sequence[pos + num] = 0
                        used[num] = False
            
            return False
        
        backtrack(0)
        return sequence

    def maximumSum(self, nums):
        from collections import defaultdict
        
        def sum_of_digits(num):
            return sum(int(digit) for digit in str(num))
        
        digit_sum_map = defaultdict(list)
        max_sum = -1
        
        for num in nums:
            digit_sum = sum_of_digits(num)
            digit_sum_map[digit_sum].append(num)
        
        for key in digit_sum_map:
            if len(digit_sum_map[key]) > 1:
                digit_sum_map[key].sort(reverse=True)
                max_sum = max(max_sum, digit_sum_map[key][0] + digit_sum_map[key][1])
        
        return max_sum
    
    def isPalindrome(self, x):
        return str(x) == str(x)[::-1]

# Example usage:
sol = Solution()
print(sol.constructDistancedSequence(3))  # Output: [3,1,2,3,2]
print(sol.constructDistancedSequence(5))  # Output: [5,3,1,4,3,5,2,4,2]
print(sol.maximumSum([18,43,36,13,7]))  # Output: 54
print(sol.maximumSum([10,12,19,14]))  # Output: -1
print(sol.isPalindrome(121))  # Output: True
print(sol.isPalindrome(-121))  # Output: False
print(sol.isPalindrome(10))  # Output: False
